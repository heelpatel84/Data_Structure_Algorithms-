// 1. Topological_Sorting ( Only For Directed Graph )
import java.util.ArrayList;
import java.util.Stack;

class Edge {
    int dest;

    public Edge(int dest) {
        this.dest = dest;
    }
}

public class Main {
    public static void topsort(ArrayList<Edge> graph[], boolean vis[], int curr, Stack<Integer> stack) {
        vis[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (!vis[e.dest]) {
                topsort(graph, vis, e.dest, stack);
            }
        }
        stack.push(curr);
    }

    public static void topologicalSort(ArrayList<Edge> graph[]) {
        int v = graph.length;
        boolean[] visited = new boolean[v];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < v; i++) {
            if (!visited[i]) {
                topsort(graph, visited, i, stack);
            }
        }

        // Print vertices in topological order
        System.out.println("Topological sorting order:");
        while (!stack.isEmpty()) {
            System.out.print(stack.pop() + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int v = 7; // Number of vertices
        ArrayList<Edge>[] graph = new ArrayList[v];
        for (int i = 0; i < v; i++) {
            graph[i] = new ArrayList<>();
        }

        // Example graph
        graph[0].add(new Edge(1));
        graph[0].add(new Edge(2));
        graph[1].add(new Edge(3));
        graph[2].add(new Edge(4));
        graph[3].add(new Edge(5));
        graph[4].add(new Edge(5));
        graph[5].add(new Edge(6));

        topologicalSort(graph);
    }
}
