//1.Cycle Detection For Undirected Graph
import java.util.ArrayList;

class Edge {
    int dest;

    public Edge(int dest) {
        this.dest = dest;
    }
}

public class Main {
    public static boolean isCycleUnDirected(ArrayList<Edge> graph[], boolean vis[], int curr, int parent) {
        vis[curr] = true;
        for (Edge e : graph[curr]) {
            if (!vis[e.dest]) {
                if (isCycleUnDirected(graph, vis, e.dest, curr)) {
                    return true;
                }
            } else if (e.dest != parent) {
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        int v = 7; // Number of vertices
        ArrayList<Edge>[] graph = new ArrayList[v];
        for (int i = 0; i < v; i++) {
            graph[i] = new ArrayList<>();
        }

        // Example graph
        graph[0].add(new Edge(1));
        graph[0].add(new Edge(4));
        graph[1].add(new Edge(4));
        graph[1].add(new Edge(2));
        graph[2].add(new Edge(3));
        graph[4].add(new Edge(5));

        boolean[] visited = new boolean[v]; // To keep track of visited vertices

        boolean hasCycle = false;
        for (int i = 0; i < v; i++) {
            if (!visited[i]) {
                if (isCycleUnDirected(graph, visited, i, -1)) {
                    hasCycle = true;
                    break;
                }
            }
        }

        if (hasCycle)
            System.out.println("The graph contains a cycle");
        else
            System.out.println("The graph does not contain a cycle");
    }
}
